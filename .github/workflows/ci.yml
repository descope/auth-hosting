name: CI

on:
  pull_request:
  push:
    branches:
      - main

env:
  NODE_VERSION: 18
  AWS_ACCOUNT_DEVOPS: 601853031418
  AWS_ROLE: GithubActions
  AWS_REGION: eu-central-1

jobs:
  build:
    name: ðŸ‘· Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          cache: "yarn"
          node-version-file: .nvmrc
          cache-dependency-path: "**/yarn.lock"
      - name: Install dependencies
        run: yarn install
        env:
          CI: true
      - name: Building
        run: yarn build

  lint:
    name: ðŸª¥ Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc
      - name: Install dependencies
        run: yarn install
        env:
          CI: true
      - name: Checking format
        run: |
          yarn format-check
      - name: Checking lint
        run: |
          yarn lint

  license-validation:
    name: ðŸªª License Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: https://npm.pkg.github.com/
      # Skip post-install scripts here, as a malicious
      # script could steal NODE_AUTH_TOKEN.
      - name: Install dependencies
        run: yarn install
        env:
          CI: true
          NODE_AUTH_TOKEN: ${{ secrets.CI_NPM_READ_ORG }}
      - name: License validation
        shell: bash
        run: ./thirdPartyLicenseCollector_linux_amd64 -npm-project .

  pack:
    name: ðŸ“¦ Pack and Upload
    runs-on: ubuntu-latest
    needs:
      - build
      - lint
      - license-validation
    permissions:
      packages: write
      contents: read
      id-token: write
    env:
      IMAGE_NAME: oidc-hosting
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Create docker ignore
        run: |
          cp .gitignore .dockerignore
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e1e17a757e536f70e52b5a12b2e8d1d1c60e04ef # v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_DEVOPS }}:role/${{ env.AWS_ROLE }}
          role-session-name: ${{ env.IMAGE_NAME }}-${{ github.run_number }}@${{ github.run_attempt }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Extract metadata for the Docker image
        id: meta
        uses: docker/metadata-action@v4.5.0
        with:
          images: |
            ghcr.io/descope/${{ env.IMAGE_NAME }}
            ${{ steps.login-ecr.outputs.registry }}/descope/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=ci-${{github.run_number}},event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value={{date 'YYYY.MM.DD'}}-${{github.ref_name}}-{{sha}},event=branch
            type=raw,value=${{github.ref_name}}-{{date 'YYYY.M.D'}}-sha-{{sha}},event=branch
            type=raw,value=${{github.ref_name}}-{{date 'YYYY.M.D'}}-${{github.run_number}},event=branch
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{github.ref_name}}-{{sha}}
      - name: Fetch commit message
        shell: bash
        id: commit-message
        run: echo message="$(git log -1 HEAD --pretty=format:%s)" >> $GITHUB_OUTPUT
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          build-args: |
            NODE_VERSION=${{ env.NODE_VERSION }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            ${{ steps.meta.outputs.labels }}
            org.opencontainers.image.description=${{steps.commit-message.outputs.message}}
