name: CI

on: [push]

env:
  NODE_VERSION: 18
  AWS_ACCOUNT_DEVOPS: 601853031418
  AWS_ROLE: GithubActions
  AWS_REGION: eu-central-1

jobs:
  build:
    name: ðŸ‘· Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          cache: 'yarn'
          node-version-file: .nvmrc
          cache-dependency-path: '**/yarn.lock'
      - name: Install dependencies
        run: yarn install
        env:
          CI: true
      - name: Building
        run: yarn build

  lint:
    name: ðŸª¥ Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          cache: 'yarn'
          node-version-file: .nvmrc
          cache-dependency-path: '**/yarn.lock'
      - name: Install dependencies
        run: yarn install
        env:
          CI: true
      - name: Checking format
        run: |
          yarn format-check
      - name: Checking lint
        run: |
          yarn lint

  testing:
    name: ðŸ‘” Test & Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          cache: 'yarn'
          node-version-file: .nvmrc
          cache-dependency-path: '**/yarn.lock'
      - name: Install dependencies
        run: yarn install
        env:
          CI: true
      - name: Testing
        run: yarn run test
      - name: Coverage check
        uses: devmasx/coverage-check-action@v1.2.0
        with:
          type: lcov
          min_coverage: 77
          result_path: coverage/lcov.info
          token: ${{ github.token }}

  license-validation:
    name: ðŸªª License Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          cache: 'yarn'
          node-version-file: .nvmrc
          cache-dependency-path: '**/yarn.lock'
          registry-url: https://npm.pkg.github.com/
      - name: Install dependencies
        run: yarn install
        env:
          CI: true
          NODE_AUTH_TOKEN: ${{ secrets.CI_NPM_READ_ORG }}
      - name: License validation
        shell: bash
        run: ./thirdPartyLicenseCollector_linux_amd64 -npm-project .

  pack:
    name: ðŸ“¦ Pack and Upload
    runs-on: ubuntu-latest
    needs:
      - build
      - lint
      - license-validation
    permissions:
      packages: write
      contents: read
      id-token: write
    env:
      IMAGE_NAME: auth-hosting
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Create docker ignore
        run: |
          cp .gitignore .dockerignore
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e1e17a757e536f70e52b5a12b2e8d1d1c60e04ef # v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_DEVOPS }}:role/${{ env.AWS_ROLE }}
          role-session-name: ${{ env.IMAGE_NAME }}-${{ github.run_number }}@${{ github.run_attempt }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Extract metadata for the Docker image
        id: meta
        uses: descope/common/.github/actions/docker-metadata@main
        with:
          images: |
            ghcr.io/descope/${{ env.IMAGE_NAME }}
            ${{ steps.login-ecr.outputs.registry }}/descope/${{ env.IMAGE_NAME }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          platforms: linux/amd64
          context: .
          push: true
          build-args: |
            NODE_VERSION=${{ env.NODE_VERSION }}
            NODE_AUTH_TOKEN=${{ secrets.CI_NPM_READ_ORG }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            ${{ steps.meta.outputs.labels }}
            org.opencontainers.image.description=${{ steps.meta.outputs.description}}
          outputs: type=image,name=target,annotation-index.org.opencontainers.image.description=${{ steps.meta.outputs.description}},annotation-index.github.sha=${{github.sha}}
